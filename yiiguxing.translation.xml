<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="594" />
    <option name="newTranslationDialogX" value="976" />
    <option name="newTranslationDialogY" value="243" />
    <histories>
      <item value="TaacL's trajectory is piece-wise linear. Each time the policy decides whether to repeat the previous linear traj or generate a new one. Importantly, to generate a new one the policy doesn't directly generate the entire set of two parameters :math:`(a,v)` because this will result in bad exploration in the action space. Instead," />
      <item value="grocery" />
      <item value="a tuple of integers representing hidden FC layer sizes FC layers after merging observations and actions." />
      <item value="A bool to gather debug summaries." />
      <item value="a big number to make sure the TimeLimit wrapper ends the game" />
      <item value="port" />
      <item value="10Hz control freq" />
      <item value="egocentric" />
      <item value="agent's egocentric distance and direction to goal egocentric_perception_range (float): the max range in degree to limit the agent's observation." />
      <item value="For the non-image observation case, use the states transformed to egocentric coordinate" />
      <item value="use egocentric states" />
      <item value="The returned environment should not access global variables." />
      <item value="the code assumes that all spaces under the nested observation space is a Box space." />
      <item value="Flattens selected keys of a Dict observation space into an array." />
      <item value="Loads the selected environment and wraps it with the specified wrappers." />
      <item value="Retrieve the success info from the environment return" />
      <item value="training batches per cycle" />
      <item value="Create a context object for recording time." />
      <item value="Calculate the reward actually used for training." />
      <item value="replace reward in `experience` with the freshly computed intrinsic rewards by the goal generator during `train_step`." />
      <item value="eplace reward in `experience` with the freshly computed intrinsic rewards by the goal generator during `train_step`." />
      <item value="dubbed" />
      <item value="The initialized network parameters will be different." />
      <item value="Parallel Critic Network" />
      <item value="These paras will train themselves, so let the parent algorithm ignore them" />
      <item value="extra" />
      <item value="rets" />
      <item value="Expand the shape of ``x`` with extra singular dimensions." />
      <item value="Trusted Updater" />
      <item value="Make sure to instantiate with parenthesis.)" />
      <item value="It will reduce memory consumption for computations that would otherwise have `requires_grad=True`." />
      <item value="Used for annotating the decorator usage of 'no_grad' and 'enable_grad'." />
      <item value="Allow a context manager to be used as a decorator" />
      <item value="This buffer doesn't preserve temporality as data from multiple environments will be arbitrarily stored." />
      <item value="Stop waiting processes from being blocked." />
      <item value="nested Tensors or None when blocking dequeue gets terminated by stop event. The shape of the Tensors is ``[batch_size, n, ...]``." />
      <item value="dequeue" />
      <item value="Note, when ``blocking == False``, it always succeeds, overwriting oldest data if there is no free slot." />
      <item value="blocking modes to ``enqueue`` and ``dequeue``, a stop event to terminate blocked processes, and putting buffer into shared memory." />
      <item value="Once stop event is set, all blocking ``enqueue`` and ``dequeue`` calls that happen afterwards will be skipped, unless the operation already started." />
      <item value="synchronous" />
      <item value="A batch of `sample_batch_size` items is returned, where each tensor in items will have its first dimension equal to sample_batch_size and the rest of the dimensions match the corresponding data_spec." />
      <item value="The environments where the sampels are from ordered in the returned batch." />
      <item value="Randomly get `batch_size` trajectories from the buffer." />
      <item value="Can only be applied on class methods, whose containing class must have ``_lock`` set to ``None`` or a ``multiprocessing.Lock`` object." />
      <item value="Cannot find a native torch function for setting default device. We have to hack our own." />
      <item value="A context manager for prefixing summary names." />
      <item value="Convert distributions to its parameters, and keep tensors unchanged. Only returns parameters that have ``Tensor`` values." />
      <item value="state used for calling ``rollout()`` to get the ``policy_step``." />
      <item value="this steps will be inaccurate if FINAL step comes before num_steps_per_skill" />
    </histories>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1636859558089" />
  </component>
  <component name="Settings">
    <option name="foldOriginal" value="true" />
  </component>
</application>